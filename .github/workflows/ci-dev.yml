name: ci-dev

on:
  push:
    branches:
      - develop

jobs:
  ci:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [14]

    steps:
      - name: Checkout üõé
        uses: actions/checkout@master

      - name: Setup node env üèó
        uses: actions/setup-node@v2.1.2
        with:
          node-version: ${{ matrix.node }}

      - name: Cache node_modules üì¶
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Set environment variables in Dockerfile
        id: env-dockerfile
        env:
          APP_PORT: ${{ secrets.HOST_PORT }}
        run: |
          sed -i "s|5000|$APP_PORT|g" Dockerfile 


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY:  ${{ secrets.APP_NAME }}-dev
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Set environment variables in ECS task definition file
        id: env-task-dev
        env:
          APP_NAME: ${{ secrets.APP_NAME }}
          APP_PORT: ${{ secrets.HOST_PORT }}
          NODE_ENV: dev
          AWS_REGION: ap-southeast-1
          AWS_ID: ${{ secrets.DEV_AWS_ID }}
          DB_HOST: ${{ secrets.DEV_DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DEV_DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DEV_DB_PASSWORD }}
          DB_NAME: ${{ secrets.DEV_DB_NAME }}
          CORS: ${{ secrets.DEV_FRONT_URL }}
          MODULE: ${{ secrets.MODULE }}
          HOST_PORT: ${{ secrets.HOST_PORT }}
          JWT_SECRET: this858isasecret!
          JWT_REFRESH_TOKEN_SECRET: this858isasecretrefreshtoken!
          PUBLIC_KEY: thisispublickey!
          PRIVATE_KEY: thisisprivatekey!

        run: |
          sed -i "s|{{app_name}}|$APP_NAME|g" deployment/task-definition-dev.json 
          sed -i "s|{{app_port}}|$APP_PORT|g" deployment/task-definition-dev.json 
          sed -i "s|{{node_env}}|$NODE_ENV|g" deployment/task-definition-dev.json  
          sed -i "s|{{aws_account_id}}|$AWS_ID|g" deployment/task-definition-dev.json  
          sed -i "s|{{aws_region}}|$AWS_REGION|g" deployment/task-definition-dev.json  
          sed -i "s|{{db_type}}|$DB_TYPE|g" deployment/task-definition-dev.json  
          sed -i "s|{{db_host}}|$DB_HOST|g" deployment/task-definition-dev.json  
          sed -i "s|{{db_port}}|$DB_PORT|g" deployment/task-definition-dev.json  
          sed -i "s|{{db_username}}|$DB_USERNAME|g" deployment/task-definition-dev.json  
          sed -i "s|{{db_password}}|$DB_PASSWORD|g" deployment/task-definition-dev.json  
          sed -i "s|{{db_name}}|$DB_NAME|g" deployment/task-definition-dev.json   
          sed -i "s|{{cors}}|$CORS|g" deployment/task-definition-dev.json  
          sed -i "s|{{module}}|$MODULE|g" deployment/task-definition-dev.json  
          sed -i "s|{{host_port}}|$HOST_PORT|g" deployment/task-definition-dev.json  
          sed -i "s|{{jwt_secret}}|$JWT_SECRET|g" deployment/task-definition-dev.json   
          sed -i "s|{{jwt_refresh_token_secret}}|$JWT_REFRESH_TOKEN_SECRET|g" deployment/task-definition-dev.json  
          sed -i "s|{{public_key}}|$PUBLIC_KEY|g" deployment/task-definition-dev.json  
          sed -i "s|{{private_key}}|$PRIVATE_KEY|g" deployment/task-definition-dev.json  
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: deployment/task-definition-dev.json 
          container-name:  ${{ secrets.APP_NAME }}-dev
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service:  ${{ secrets.APP_NAME }}-dev-service
          cluster: oandb-dev
          wait-for-service-stability: true